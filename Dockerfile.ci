# syntax=docker/dockerfile:1.4
# Dockerfile.ci - Production build using GoReleaser artifacts for CI/CD pipeline

FROM gcr.io/distroless/static:nonroot

LABEL org.opencontainers.image.title="OTC CloudEye Exporter"
LABEL org.opencontainers.image.description="Prometheus exporter for Open Telekom Cloud CloudEye metrics"
LABEL org.opencontainers.image.vendor="Abdelfadeel Farag"
LABEL org.opencontainers.image.source="https://github.com/abdo-farag/otc-cloudeye-exporter"
LABEL org.opencontainers.image.documentation="https://github.com/abod-farag/otc-cloudeye-exporter/blob/main/README.md"
LABEL org.opencontainers.image.licenses="Apache-2.0"

# Accept build metadata
ARG VERSION=dev
ARG COMMIT_SHA=unknown
ARG BUILD_DATE
ARG TARGETARCH=amd64

# Apply metadata labels
LABEL org.opencontainers.image.version=$VERSION
LABEL org.opencontainers.image.revision=$COMMIT_SHA
LABEL org.opencontainers.image.created=$BUILD_DATE

WORKDIR /app

# Copy pre-built binary from GoReleaser dist directory
# The TARGETARCH variable allows for multi-arch builds
COPY dist/otc-cloudeye-exporter_linux_${TARGETARCH}*/otc-cloudeye-exporter /app/

# Copy configuration files
COPY *.yml /app/

USER nonroot

EXPOSE 9098 9099

# Production-ready health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=15s --retries=3 \
    CMD ["/app/otc-cloudeye-exporter", "--version"]

# Use exec form for proper signal handling in orchestration
ENTRYPOINT ["/app/otc-cloudeye-exporter"]
CMD ["-config", "/app/clouds.yml"]